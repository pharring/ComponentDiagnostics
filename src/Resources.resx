<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddProviderIndirect_ArgumentNull" xml:space="preserve">
    <value>AddProviderIndirect was called with a null diagnostics provider argument.</value>
  </data>
  <data name="AddProvider_ArgumentNull" xml:space="preserve">
    <value>AddProvider was called wiht a null data model argument.</value>
  </data>
  <data name="AddProvider_ProviderAlreadyAdded" xml:space="preserve">
    <value>The requested diagnostics provider has already been added.</value>
  </data>
  <data name="AddProvider_ProviderNotRegistered" xml:space="preserve">
    <value>The requested diagnostics provider is not registered.</value>
  </data>
  <data name="CanNotCreateWindow" xml:space="preserve">
    <value>Unable to create the Component Diagnostics tool window.</value>
  </data>
  <data name="ComponentDiagnosticsServiceUnavailable" xml:space="preserve">
    <value>The component diagnostics service provider is not available.</value>
  </data>
  <data name="CreateFrameworkElementFailed" xml:space="preserve">
    <value>The UI Factory returned a valid UI Element that supports IVsUIWpfElement, but CreateFrameworkElementFailed with error code 0x{0:x}</value>
  </data>
  <data name="CreateFrameworkElementTargetInvocationException" xml:space="preserve">
    <value>The UI Factory threw a TargetInvocationException during CreateFrameworkElement. This typically indicates a bug in the WPF control being instantiated. The inner exception message follows.

{0}</value>
  </data>
  <data name="CreateUIElementFailed" xml:space="preserve">
    <value>Unable to load the diagnostics provider view (UI Factory:{0}, element {1}). The UI factory service returned error code 0x{2:x}</value>
  </data>
  <data name="GetUIObjectFailed" xml:space="preserve">
    <value>The UI Factory returned a valid view, but the view failed to create.  The UI element's GetUIObject method returned error code 0x{0:x}</value>
  </data>
  <data name="InvalidElementId" xml:space="preserve">
    <value>The UI Factory's CreateUIElement method was called with an unrecognized element ID (DWORD)</value>
  </data>
  <data name="InvalidFactoryId" xml:space="preserve">
    <value>The UI Factory's CreateUIElement method was called with an unrecognized factory GUID</value>
  </data>
  <data name="ProviderIsNull" xml:space="preserve">
    <value>A view could not be created because the selected diagnostics provider supplied an empty data model.</value>
  </data>
  <data name="RemoveProvider_AlreadyInactive" xml:space="preserve">
    <value>The requested provider was not added or has already been removed.</value>
  </data>
  <data name="RemoveProvider_InvalidCookie" xml:space="preserve">
    <value>RemoveProvider was called with an invalid cookie value.</value>
  </data>
  <data name="SelectedProviderIsInactive" xml:space="preserve">
    <value>The selected diagnostics provider is not currently active. Select a different active provider from the list on the left.</value>
  </data>
  <data name="ToolWindowTitle" xml:space="preserve">
    <value>Component Diagnostics</value>
  </data>
  <data name="ViewIsNotAFrameworkElement" xml:space="preserve">
    <value>The UI Factory returned a valid UI Element but it does not support WPF and cannot be used in this window. (Actual type:{0})</value>
  </data>
</root>